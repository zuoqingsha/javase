<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE configuration
        PUBLIC "-//mybatis.org//DTD Config 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-config.dtd">
<configuration>
    <!--引入外部配置文件，类似于Spring中的property-placeholder
        resource：从类路径引入，如果是idea指的就是resources目录下的配置文件
        url：从磁盘路径或网络路径引入
    -->
    <properties resource="db.properties"></properties>
    <!--用来控制mybatis运行时的行为，是mybatis中的重要配置-->
    <settings>
        <!--设置列名映射时是否为驼峰标识-->
        <setting name="mapUnderscoreToCamelCase" value="true"/>
        <setting name="logImpl" value="LOG4J"/>
    </settings>
    <!--typeAliases表示为我们引用的实体类起别名，默认情况下我们需要写类的完全限定名
        如果在此处做了配置，那么可以直接写类的名称，在type中配置类的完全限定名，在使用时可以
        忽略大小写，还可以通过alias属性表示类的别名
    -->
    <typeAliases>
<!--        <typeAlias type="com.chenxk.bean.Emp" alias="Emp"></typeAlias>-->
        <!--如果需要引用多个类，那么给每个类起别名会很麻烦，因此可以指定对应的包名，那么默认用的时类名-->
        <package name="com.chenxk.bean"/>
    </typeAliases>
    <!--
    在实际的开发过程中，我们可能分为开发环境，测试环境，生产环境等，每个环境的配置是不一样的
    environment就用来表示不同环境的细节配置，每个环境中都需要一个事务管理器及数据源的配置
    我们在后续的项目开发中几乎都是使用spring中配置的数据源和事务管理器来配置，此处无需研究
    -->
    <!--default：用来选择需要的环境-->
    <environments default="development">
        <!--id：表示不同环境的名称-->
        <environment id="development">
            <!--
            事务管理器，每一种数据源都需要配置具体的事务管理器
            type：表示事务管理器的类型，有两种类型的事务管理器（也就是 type="[JDBC|MANAGED]"）
                JDBC：使用jdbc原生的事务控制
                MANAGED：什么都没做
            -->
            <transactionManager type="JDBC"/>
            <!--
            配置具体的数据源类型
            type：表示事务管理器的类型，有三种内建的数据源类型（也就是 type="[UNPOOLED|POOLED|JNDI]"）
                POOLED：使用数据库连接池
                UNPOOLED：每次请求时打开和关闭连接
            -->
            <dataSource type="POOLED">
                <!--使用${}来引入外部变量-->
                <property name="driver" value="${jdbc.driver}"/>
                <property name="url" value="${jdbc.url}"/>
                <property name="username" value="${jdbc.username}"/>
                <property name="password" value="${jdbc.password}"/>
            </dataSource>
        </environment>
    </environments>
    <!--
    在不同的数据库中，可能sql语句的写法不同，为了增强移植性，可以提供不同数据库的操作实现
    在编写不同的sql语句的时候，可以指定databaseId属性来标识当前sql语句可以运行在哪个数据库中
    -->
    <databaseIdProvider type="DB_VENDOR">
        <property name="MySQL" value="mysql"/>
        <property name="Oracle" value="orcl"/>
        <property name="SQL Server" value="sqlserver"/>
    </databaseIdProvider>
    <!--将sql的映射文件适用mappers进行映射-->
    <mappers>
        <!--
        指定具体的不同的配置
        class：直接引入接口的全类名，可以将xml文件放在dao的同级目录下，并且设置相同的文件名称，同时可以使用注解的方式来进行相关配置
        url：可以从磁盘或者网络路径查找sql映射文件
        resource：在类路径下寻找sql映射文件
        -->
<!--        <mapper resource="EmpDao.xml"/>-->
<!--        <mapper resource="UserDao.xml"/>-->
<!--        <mapper resource="com.chenxk.dao.EmpDaoAnnotation" />-->

        <!--
        当包含多个配置文件或者配置类的时候，可以使用批量注册的功能，也就是引入对应的包，而不是具体的配置文件或者类
        但是需要注意的是：
        1、如果使用配置文件的形式，必须要将配置文件跟dao类放在一起，这样才能找到对应的配置文件
            如果是maven项目，还需添加以下配置，原因是maven在编译文件时只会编译java文件
            <build>
                <resources>
                    <resource>
                        <directory>src/main/java</directory>
                    </resource>
                    <includes>
                        <include>**/*.xml</include>
                    </includes>
                </resources>
            </build>
        2、或将配置文件在resources资源路径下创建跟dao相同的包名
        -->
        <package name="com.chenxk.dao"/>

    </mappers>
</configuration>